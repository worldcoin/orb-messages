syntax = "proto3";

package orb.mcu.sec;

import "nanopb.proto";
import "common.proto";
import "sec_priv.proto";

enum Version {
    VERSION_0 = 0;
}

message JetsonToSec
{
    uint32 ack_number = 1; // monotonically incrementing number. We will
                           // acknowledge all messages
    oneof payload
    {
        orb.mcu.RebootWithDelay reboot = 3;
        orb.mcu.FirmwareUpdateData dfu_block = 4;
        orb.mcu.Heartbeat heartbeat = 5;
        SERequest se_request = 6;
        orb.mcu.FirmwareImageCheck fw_image_check = 20;
        orb.mcu.FirmwareActivateSecondary fw_image_secondary_activate = 21;
        orb.mcu.ValueGet value_get = 22;
        orb.mcu.FirmwareConfirmPrimary fw_image_primary_confirm = 23;
        orb.mcu.SyncDiagData sync_diag_data = 24;
        orb.mcu.DiagTest diag_test = 25;
    }
}

message SecToJetson
{
    reserved 6; // used in previous versions

    oneof payload
    {
        orb.mcu.Ack ack = 1;
        orb.mcu.Versions versions = 2;
        orb.mcu.Log log = 3;
        orb.mcu.sec.SEResponse se_response = 4;
        orb.mcu.sec.private.Tamper tampered = 5 [deprecated = true];
        orb.mcu.BatteryStatus battery_status = 7;
        orb.mcu.FatalError fatal_error = 8;
        orb.mcu.sec.private.TamperRaw tamper_raw = 9 [deprecated = true];
        orb.mcu.sec.private.TamperStates tamper_states = 10 [deprecated = true];
        orb.mcu.Temperature temperature = 11;
        orb.mcu.MemfaultEvent memfault_event = 12;
        orb.mcu.HardwareDiagnostic hardware_diag = 13;
        orb.mcu.sec.Tamper tamper = 14;
    }
}

message SERequest
{
    enum RequestType {
        READ_WRITE = 0;
        CLEAR_READ_BUFFER = 1;
        POWER_OFF = 2;
    };
    uint32 id = 1;
    bytes data = 2;
    uint32 rx_length = 3;
    RequestType request_type = 4;
}

message SEResponse
{
    uint32 id = 1;
    int32 error_code = 2;
    bytes data = 3;
}

message Tamper {
    /// Contains tamper information serialized as json. It is "opaque" because
    /// the schema of the json is not known by orb-messages. Inspecting the
    /// json is instead done at run time by other software.
    // NOTE: in proto3, all fields are implicitly optional. But we mark it
    // explicitly here just to be extra clear.
    optional string unencrypted_json = 1 [(nanopb).max_size = 640];
}
